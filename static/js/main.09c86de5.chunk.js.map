{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defaultText","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","editorInput","target","value","getMarkdownText","renderer","marked","Renderer","link","href","title","text","prototype","concat","__html","state","gfm","breaks","sanitize","charCount","length","wordCount","match","react_default","a","createElement","className","App_Editor","input","handleInput","App_Preview","Component","Editor","class","id","onChange","Preview","dangerouslySetInnerHTML","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAIMA,SAAW,+nBA+BXC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,aAAe,SAACC,GACdR,EAAKS,SAAS,CACZC,YAAaF,EAAMG,OAAOC,SATXZ,EAanBa,gBAAkB,WAChB,IAAMC,EAAW,IAAIC,IAAOC,SAY5B,OAXAF,EAASG,KAAO,SAAUC,EAAMC,EAAOC,GACxBL,IAAOC,SAASK,UAAUJ,KAAKX,KAAKH,KAAMe,EAAMC,EAAOC,GACpE,kCAAAE,OAAmCJ,EAAnC,MAAAI,OAA4CF,EAA5C,SASK,CAAEG,OANSR,IAAOf,EAAKwB,MAAMd,YAAa,CAC/CI,SAAUA,EACVW,KAAK,EACLC,QAAQ,EACRC,UAAU,MAxBK3B,EA6BnB4B,UAAY,WACV,OAAO5B,EAAKwB,MAAMd,YAAYmB,OAAS7B,EAAKwB,MAAMd,YAAYmB,OAAS,GA9BtD7B,EAiCnB8B,UAAY,WACV,OAAO9B,EAAKwB,MAAMd,YAAYmB,OAAS7B,EAAKwB,MAAMd,YAAYqB,MAAM,WAAWF,OAAS,GAhCxF7B,EAAKwB,MAAQ,CACXd,YAAab,GAHEG,wEAsCjB,OACEgC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,4BAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACE,EAAD,CACEC,MAAOlC,KAAKqB,MAAMd,YAClB4B,YAAanC,KAAKI,aAClBqB,UAAWzB,KAAKyB,YAChBE,UAAW3B,KAAK2B,cAClBE,EAAAC,EAAAC,cAACK,EAAD,CACEF,MAAOlC,KAAKU,6BAnDN2B,aA0DZC,mLAGF,OACET,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,QACTV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,UACTV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,gBAAX,mBACAV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,UACTV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,cAAX,eAAqCvC,KAAKJ,MAAM6B,WAChDI,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,cAAX,UAAgCvC,KAAKJ,MAAM+B,aAG/CE,EAAAC,EAAAC,cAAA,YAAUC,UAAU,UAAUQ,GAAG,SAC/B/B,MAAOT,KAAKJ,MAAMsC,MAClBO,SAAUzC,KAAKJ,MAAMuC,sBAdVE,aAqBfK,mLAGF,OACEb,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,SACTV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,UAAX,WAGAV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUQ,GAAG,UAAUG,wBAAyB3C,KAAKJ,MAAMsC,gBAR5DG,aAeP1C,ICrHKiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.09c86de5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport marked from 'marked'; \r\nimport './App.css';\r\n\r\nconst defaultText = \r\n  `# H1 Header \r\n## Subheader\r\nHere's a link [Marked](https://marked.js.org/#/README.md) - marked.js\r\n\r\nInline code \\`<div>Some code here</div>\\` goes here\r\n\r\nCode block:\r\n\\`\\`\\`sh \r\n$ cd dillinger\r\n$ npm install -d\r\n$ node app\r\n\\`\\`\\`\r\n* Unordered list item\r\n* Another unordered list item\r\n1 Ordered sub-list item\r\n2 Another ordered sub-list item\r\n\r\n#### Blockquote header\r\n> Throw in a blockquote\r\n> still blockquoting\r\n\r\nHere's an image:\r\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \"Logo Title Text 1\")\r\n\r\n**This is bold text**\r\n\r\nBigger image:\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`; \r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      editorInput: defaultText\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      editorInput: event.target.value\r\n    })\r\n  }\r\n\r\n  getMarkdownText = () => {\r\n    const renderer = new marked.Renderer();\r\n    renderer.link = function (href, title, text) {\r\n      const link = marked.Renderer.prototype.link.call(this, href, title, text);\r\n      return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\r\n    }\r\n\r\n    const rawMarkup = marked(this.state.editorInput, {\r\n      renderer: renderer,\r\n      gfm: true,\r\n      breaks: true,\r\n      sanitize: true\r\n    });\r\n    return { __html: rawMarkup };\r\n  }\r\n\r\n  charCount = () => {\r\n    return this.state.editorInput.length ? this.state.editorInput.length : 0;\r\n  }\r\n\r\n  wordCount = () => {\r\n    return this.state.editorInput.length ? this.state.editorInput.match(/[^\\s]+/g).length : 0;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"title-bar\">\r\n          React Markdown Previewer\r\n        </div>\r\n        <div className=\"inner-container\">\r\n          <Editor\r\n            input={this.state.editorInput} \r\n            handleInput={this.handleChange}\r\n            charCount={this.charCount()}\r\n            wordCount={this.wordCount()}/>\r\n          <Preview \r\n            input={this.getMarkdownText()}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Editor extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"left\">\r\n        <div class=\"header\">\r\n          <div class=\"header-title\">Markdown editor</div>\r\n          <div class=\"counts\">\r\n            <div class=\"char-count\">Characters: {this.props.charCount}</div>\r\n            <div class=\"word-count\">Words: {this.props.wordCount}</div>\r\n          </div>\r\n        </div>\r\n        <textarea className=\"content\" id=\"editor\"\r\n          value={this.props.input}\r\n          onChange={this.props.handleInput}>\r\n        </textarea>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Preview extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"right\">\r\n        <div class=\"header\">  \r\n          Preview\r\n        </div>\r\n        <div className=\"content\" id=\"preview\" dangerouslySetInnerHTML={this.props.input}>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}